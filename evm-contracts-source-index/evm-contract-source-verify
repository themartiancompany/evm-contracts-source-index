#!/usr/bin/env bash

# SPDX-License-Identifier: AGPL-3.0-or-later

#    ----------------------------------------------------------------------
#    Copyright Â© 2024, 2025  Pellegrino Prevete
#
#    All rights reserved
#    ----------------------------------------------------------------------
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="$( \
  realpath \
    "${_bin}/../lib")"
_crash_bash="${_lib}/libcrash-bash/crash-bash"
_libevm="${_lib}/libevm/libevm"
_sourced \
  "${_crash_bash}" 2>/dev/null || \
  source \
    "${_crash_bash}"
_sourced \
  "${_libevm}"

# shellcheck disable=SC2034
_global_variables() {
  verify_date=""
  contract_address=""
  contract_file=""
  transaction_deployment=""
  bytecode_verify=""
  si_address=""
  si_version=""
  solc_version=""
  evm_version=""
  target_network=""
  cache_dir=""
  command_args=()
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    'evm-chains-explorers'
  _check_cmd \
    'evm-chains-info'
  _check_cmd \
    "evm-contract-bytecode-get" \
    "evm-contracts-tools"
  # _check_cmd \
  #   'evm-contract-call' \
  #   'evm-contracts-tools'
  _check_cmd \
    'libevm-requirements' \
    'libevm'
  libevm-requirements
  _check_cmd \
    'evm-wallet'
  _check_cmd \
    "solidity-compiler"
}

_get_conf_dir_path() {
  local \
    _dir
  _dir="${HOME}/.config/evmfs"
  echo \
    "${_dir}"
}

_cache_dir_auto_detect() {
  local \
    _dir
  _dir="${HOME}/.cache/${app_name}"
  echo \
    "${_dir}"
}

_chunk_verify() {
  local \
    _contract="${1}" \
    _namespace="${2}" \
    _sum="${3}" \
    _index="${4}" \
    _chunk="${5}" \
    _remote \
    _verify_dir \
    _local_sum \
    _remote_sum \
    _msg=()
  _verify_dir="${_cache_dir}/${_sum}/verify"
  _remote="${_verify_dir}/${_index}"
  mkdir \
    -p \
    "${_verify_dir}"
  evm-contract-call \
    "${_verify_call_opts[@]}" \
    "${_fs_address}" \
    "chunks" \
    "${_namespace}" \
    "${_sum}" \
    "${_index}" > \
    "${_remote}"
  _local_sum="$( \
    _file_hash \
      "${_chunk}")"
  _remote_sum="$( \
    _file_hash \
      "${_remote}")"
  if [[ "${_local_sum}" != "${_remote_sum}" ]]; then
    _msg=(
      "somehow local chunk '${_chunk}',"
      "corresponding to chunk having"
      "index '${_index}' on the blockchain"
      "has not been written correctly"
      "on the blockchain at address '$(_publishing_address_get)'"
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_sum_get() {
  local \
    _content="${1}" 
  echo \
    "${_content}" | \
    sha256sum | \
      awk \
        '{print $1}'
}

_file_hash() {
  local \
    _file="${1}" \
    _content
  _content="$( \
    cat \
      "${_file}")"
  _sum="$( \
    _sum_get \
      "${_content}")"
  echo \
   "${_sum}" 
}

_work_dir_setup() {
  local \
    _msg=()
  _tmp_dir="${_cache_dir}/${_target_network}/${_contract_address}"
  _msg=(
    "Setting up work directory"
    "'${_tmp_dir}'."
  )
  _msg_info \
    "${_msg[*]}"
  mkdir \
    -p \
    "${_tmp_dir}"
}

_file_encode() {
  local \
    _msg=() \
    _length
  _length=22000
  _chunk_prefix="$( \
    mktemp \
      -u \
      -p \
      "${_tmp_dir}" \
      --suffix=".base64")"
  _file_size_check \
    "${_file}"
  _bin2txt_opts+=(
    -L
      "${_length}"
  )
  if [[ "${quiet}" == "n" ]]; then
    _bin2txt_opts+=(
      -v
    )
  fi
  _msg=(
    "encoding file with base64 encoding"
    "and splitting it into 22000 characters"
    "chunks"
  )
  _msg_info \
    "${_msg[*]}"
  bin2txt \
    "${_bin2txt_opts[@]}" \
    "${_file}" \
    "${_chunk_prefix}"
}

_evm_contract_source_get_opts_setup() {
  if [[ "${_wallet_name}" != "" ]]; then
    _evm_contract_source_get_opts+=(
      -N
        "${_wallet_name}"
    )
  fi
  if [[ "${_wallet_seed}" != "" ]]; then
    _evm_contract_source_get_opts+=(
      -s
        "${_wallet_seed}"
    )
  fi
  if [[ "${_wallet_seed}" != "" ]]; then
    _evm_contract_source_get_opts+=(
      -s
        "${_wallet_seed}"
    )
  fi
  if [[ "${_wallet_password}" != "" ]]; then
    _evm_contract_source_get_opts+=(
      -p
        "${_wallet_password}"
    )
  fi
  if [[ "${_api_key_path}" != "" ]]; then
    _evm_contract_source_get_opts+=(
      -k
        "${_api_key_path}"
    )
  fi
  if [[ "${_target_network}" != "" ]]; then
    _evm_contract_source_get_opts+=(
      -n
        "${_target_network}"
    )
  fi

}

_solidity_compiler_opts_setup() {
  _solidity_compiler_opts=()
  if [[ "${quiet}" == "n" ]]; then
    _solidity_compiler_opts+=(
      -v
    )
  fi
}

_evm_contract_source_verify() {
  local \
    _call_auth="${1}" \
    _si_address="${2}" \
    _si_version="${3}" \
    _deployments_dir="${4}" \
    _wallet_name="${5}" \
    _wallet_path="${6}" \
    _wallet_password="${7}" \
    _wallet_seed="${8}" \
    _target_network="${9}" \
    _api_key_path="${10}" \
    _bytecode_verify="${11}" \
    _cache_dir="${12}" 
    _contract_address="${13}" \
    _target_publisher="${14}" \
    _contract_file="${15}" \
    _transaction_deployment="${16}" \
    _evm_version="${17}" \
    _solc_version="${18}" \
    _command_args=() \
    _evm_contract_source_get_opts=() \
    _solidity_compiler_opts=() \
    _cmd \
    _args=() \
    _namespace \
    _fs_abi \
    _fs_bytecode \
    _fs_compiler_output
  shift \
    18
  _command_args+=(
    "$@"
  )
  if [[ "${quiet}" == "n" ]]; then
  fi
  _msg=(
    "Verifying source for"
    "contract '${_contract_address}'"
    "on network '${_target_network}'"
    "on the Source Index."
  )
  _msg_info \
    "${_msg[*]}"
  if [[ "${_bytecode_verify}" == "runtime" ]]; then
    if [[ "${_contract_file}" == "" ]]; then
      _evm_contract_source_get_opts_setup
      # TODO:
      # evm-contract-source-get \
      #   "${_evm_contract_source_get_opts[@]}"
      #   "${_contract_address}"
      _msg_error \
        "Not implemented." \
        1
    fi
    if [[ -e "${_contract_file}" ]]; then
      _solidity_compiler_opts_setup
      solidity-compiler \
        "${_solidity_compiler_opts[@]}" \
        "${_contract_file}"
    elif [[ ! -e "${_contract_file}" ]]; then
      _msg=(
        _msg_error \
          "Not implemented." \
          1
      )
      _msg_error \
        "${_msg[*]}" \
        1
    fi
  else
    _msg=(
      "Unknown bytecode"
      "verification type"
      "'${_bytecode_verify}'."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  # _contract_artifacts_auto_detect \
  #   "${_deployments_dir}" \
  #   "${_target_network}" \
  #   "SourceIndex" \
  #   "_si" \
  #   "${_si_version}"
  # _contract_data_retrieve
  # _namespace="$( \
  #   evm-wallet \
  #    get \
  #      "${_wallet_name}" \
  #      "address")"
  # _fs_abi="$( \
  #   _abi_get \
  #     "${_deployments_dir}" \
  #     "${_target_network}" \
  #     "FileSystem" \
  #     "${_fs_version}")"
  # _fs_bytecode="$( \
  #   _bytecode_get \
  #     "${_deployments_dir}" \
  #     "${_target_network}" \
  #     "FileSystem" \
  #     "${_fs_version}")"
  # _fs_compiler_output="$( \
  #   _compiler_output_get \
  #     "${_deployments_dir}" \
  #     "${_target_network}" \
  #     "FileSystem" \
  #     "${_fs_version}")"
  # if [[ "${_upload_method}" == "standalone" ]]; then
  #   _file_upload_standalone \
  #     "${_target_network}" \
  #     "${_fs_address}" \
  #     "${_namespace}" \
  #     "${_target_file}" \
  #     "${_fs_abi}" \
  #     "${_fs_bytecode}" \
  #     "${_fs_compiler_output}"
  # else
  #   _msg_error \
  #     "unknown upload method '${_upload_method}'"
  # fi
}

_wallet_path_get() {
  local \
    _path \
    _name
  _name="$( \
    _get \
      "wallet" \
      "name")"
  _path="$( \
    _get_conf_dir_path)/${_name}.dat"
  echo \
    "${_path}"
}

_secret_get() {
  local \
    _secret="${1}" \
    _path \
    _name
  _name="$( \
    _get \
      "wallet" \
      "name")"
  _path="$( \
    _get_conf_dir_path)/${_name}-${_secret}.txt"
  echo \
    "${_path}"
}

_api_key_auto_detect() {
  local \
    _chain="${1}" \
    _chain_name \
    _key \
    _msg=()
  _key="$( \
    evm-chains-explorers \
      -c \
        "${_chain}" \
      -s \
        'kirsh' \
      get \
        keys)"
  _chain_name="$( \
    evm-chains-info \
      -o \
        "name" \
      "${_chain}")"
  if [[ ! -e "${_key}" ]]; then
    _msg=(
      "Found no provider services"
      "keys for chain '${_chain_name}'."
      "Check available service"
      "providers with \"evm-chains-info"
      "-o explorers '${_chain}'\""
      "and add the relative api key in"
      "'<user_home>/.config/evm-chains-explorers/<service>/default.txt'"
    )
    _msg_info \
      "${_msg[*]}"
  fi
  _set_override \
    "api" \
    "key" \
    "${_key}"
}

_secret_auto_detect() {
  local \
    _secret="${1}" \
    _secret_type="${2}" \
    _dir \
    _key_gen_opts=() \
    _msg=()
  _path="$( \
    _secret_get \
      "${_secret}")"
  _dir="$( \
    dirname \
      "${_path}")"
  if [[ ! -e "${_path}" ]]; then
    _key_gen_opts+=(
      -t
        "${_secret_type}"
    )
    _msg=(
      "generating ${_secret} '${_path}'"
    )
    if [[ "${quiet}" == "n" ]]; then
      _msg_info \
        "${_msg[*]}"
    fi
    mkdir \
      -p \
      "${_dir}"
    chmod \
      700 \
      "${_dir}"
    chmod \
      700 \
      "${_dir}"
    key-gen \
      "${_key_gen_opts[@]}" \
      "${_path}"
    chmod \
      400 \
      "${_path}"
    _msg=(
      "${_secret} '${_path}' successfully generated"
    )
    if [[ "${quiet}" == "n" ]]; then
      _msg_info \
        "${_msg[*]}"
    fi
  fi
  _set_override \
    "wallet" \
    "${_secret}" \
    "${_path}"
}

_deployments_dir_auto_detect() {
  local \
    _user_level \
    _evm_contract_deployments_dir_opts=() \
    _deployments_dir \
    _system_deployments
  _user_level="$( \
    _get \
      "user" \
      "level")"
  if [[ "${_user_level}" == "y" ]]; then
    _evm_contract_deployments_dir_opts+=(
      -u
    )
  fi
  _deployments_dir="$( \
    evm-contract-deployments-dir \
      "${_evm_contract_deployments_dir_opts[@]}" \
      "evmfs")"
  if [[ ! -d "${_deployments_dir}" ]]; then
    _system_deployments="$( \
     evm-contract-deployments-dir \
       "evmfs")"
    _msg=(
      "user deployments directory"
      "'${_deployments_dir}' does"
      "not exists, importing system deployments"
      "directory '${_system_deployments}'"
    )
    _msg_info \
      "${_msg[*]}"
    mkdir \
      -p \
      "${_deployments_dir}"
    chmod \
      700 \
      "${_deployments_dir}"
    cp \
     -r \
     "${_system_deployments}/"* \
     "${_deployments_dir}"
  fi
  _set_override \
    "deployments" \
    "dir" \
    "${_deployments_dir}"
}

_network_auto_detect() {
  local \
    _contract \
    _contract_deployment \
    _deployments \
    _user \
    _msg=()
  _contract="FileSystem"
  _deployments="$( \
    _get \
      "deployments" \
      "dir")"
  _contract_deployment="${_deployments}/${_contract}"
  _user="$( \
    _get \
      "user" \
      "level")"
  if [[ "${_user}" == "y" ]]; then
    _msg=(
     "User deployments enabled, looking"
     "for cheapest network deployments at" 
     "path '${_contract_deployment}'"
   )
   _msg_info \
     "${_msg[*]}"
  fi
  _network="$( \
    evm-contract-deployment-networks \
      -C \
      "${_contract_deployment}")"
  if [[ "${_user}" == "y" ]]; then
    _msg=(
      "Found network '${_network}'"
    )
    _msg_info \
      "${_msg[*]}"
  fi
  _set_override \
    "target" \
    "network" \
    "${_network}"
}

_fs_version_auto_detect() {
  local \
    _config \
    _deployments \
    _network \
    _version
  _deployments="$( \
    _get \
      "deployments" \
      "dir")"
  _network="$( \
    _get \
      "target" \
      "network")"
  _config="${_deployments}/FileSystem/${_network}/config.sh"
  _version="$( \
    evm-contract-deployment-versions \
      -H \
      "${_config}")"
  _set_override \
    "fs" \
    "version" \
    "${_version}"
}

_fs_address_auto_detect() {
  local \
    _address \
    _network \
    _deployments \
    _user \
    _version \
    _evm_contract_deployment_address_opts=() \
    _msg=()
  _network="$( \
    _get \
      "target" \
      "network")"
  _evm_contract_deployment_address_opts+=(
    -n
      "${_network}"
  )
  _version="$( \
    _get \
      "fs" \
      "version")"
  if [[ "${_version}" != "" ]]; then
    _evm_contract_deployment_address_opts+=(
      -V
        "${_version}"
    )
  fi
  _user="$( \
    _get \
      "user" \
      "level")"
  if [[ "${_user}" == "n" ]]; then
    _evm_contract_deployment_address_opts+=(
      -a
        "evmfs"
    )
  elif [[ "${_user}" == "y" ]]; then
    _deployments="$( \
      _get \
        "deployments" \
        "dir")"
    _evm_contract_deployment_address_opts+=(
      -u
      -d
        "${_deployments}" 
    )
  fi
  _address="$( \
    evm-contract-deployment-address \
      "${_evm_contract_deployment_address_opts[@]}" \
      "FileSystem")"
  if [[ "${_address}" == "" ]]; then
    _msg=(
      "error getting FileSystem version"
      "${_version} deployment address"
      "for network '${_network}'"
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  _set_override \
    "fs" \
    "address" \
    "${_address}"
}

_set_overrides() {
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _set_override \
    "verify" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "user" \
    "level" \
    "n"
  _set_override \
    "call" \
    "auth" \
    "n"
  _set_override \
    "retries" \
    "max" \
    "300"
  _set_override \
    "target" \
    "network" \
    "100"
  _set_override \
    "rpc" \
    "selection" \
    "kirsh"
  _deployments_dir_auto_detect \
    "evm-contracts-source-index" \
    "${user_level}"
  _network_auto_detect \
    "SourceIndex" \
    "${deployments_dir}" \
    "${user_level}"
  _api_key_auto_detect \
    "${target_network}"
  _wallet_overrides_set \
    "evm-wallet" \
    "default" \
    "${call_auth}"
  _set_override \
    "bytecode" \
    "verification" \
    "runtime"
  _set_override \
    "evm" \
    "version" \
    ""
  _set_override \
    "solc" \
    "version" \
    ""
  _set_override \
    "contract" \
    "file" \
    ""
  _set_override \
    "cache" \
    "dir" \
    "$(_cache_dir_auto_detect)"
  _contract_setup_auto_detect \
    "evm-contracts-source-index" \
    "SourceIndex" \
    "si" \
    "${target_network}" \
    "${user_level}" \
    "${deployments_dir}"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _si_deployment \
    _networks \
    _usage_text
  _si_deployment="${deployments_dir}/SourceIndex"
  _networks=( $( \
    evm-contract-deployment-networks \
      -A \
      "${_si_deployment}")
  )
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

EVM network smart contract verifier

Usage:
  ${app_name}
    [options]
    <contract_address>

  networks:
$(_display_networks \
     "${_networks[@]}")

  options:
     -i <contract_file>     If not specified will try to get
                            one from the index.
                            Default: ${contract_file}
     -b <bytecode_verify>   It can be 'standalone' or 'bulk'
                            Default: ${bytecode_verify}
     -e <evm_version>       EVM version for the contract.
                            Default: ${evm_version}
     -S <solc_version>      Solc version for the contract.
                            If not specified will attempt
                            to get one from the index.
                            Default: ${solc_version}
     -T <tx_deployment>     Deployment transaction for this contract.
                            Default: ${transaction_deployment}

  contract options:
     -A <si_address>        Address of the EVM contract source
                            index.
                            Default: ${si_address}
     -V <si_version>        Version of the target EVM contract
                            source index.
                            Default: ${si_version}

  libEVM options:
     -u                     Whether to retrieve index address
                            from user directory or custom
                            deployment.
                            Default: ${user_level}
     -d <deployments_dir>   Contracts deployments directory.
                            Default: ${deployments_dir}
     -n <network>           EVM network name (${_networks[*]}).
                            Default: ${target_network}

  credentials options:
     -N <wallet_name>       Wallet name.
                            Default: ${wallet_name}
     -w <wallet_path>       Wallet path.
                            Default: ${wallet_path}
     -p <wallet_password>   Wallet password.
                            Default: ${wallet_password}
     -s <wallet_seed>       Wallet seed path.
                            Default: ${wallet_seed}
     -k <api_key>           Etherscan-like service key.
                            Default: ${api_key}

  application options:
     -W <cache_dir>         Work directory
                            Default: ${cache_dir}

     -h                     This message.
     -c                     Enable color output
     -v                     Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "        Verification date:   ${verify_date}"
  _msg_info "            Index address:   ${si_address}"
  _msg_info "            Index version:   ${si_version}"
  _msg_info "               User level:   ${user_level}"
  _msg_info "    Deployments directory:   ${deployments_dir}"
  _msg_info "                Namespace:   ${wallet_address}"
  _msg_info "              Wallet name:   ${wallet_name}"
  _msg_info "              Wallet path:   ${wallet_path}"
  _msg_info "          Wallet password:   ${wallet_password}"
  _msg_info "              Wallet seed:   ${wallet_seed}"
  _msg_info "           Target network:   ${target_network}"
  _msg_info "                  API key:   ${api_key}"
  _msg_info "            Upload method:   ${upload_method}"
  _msg_info "          Cache directory:   ${cache_dir}"
  _msg_info "         Target publisher:   ${target_publisher}"
  _msg_info "           Target address:   ${target_file}"
}

_globals
_global_variables
_requirements
_config_user_init \
  "${app_name}"
# shellcheck disable=SC2034
getopts_opts="$( \
  printf \
    "%s" \
    "i:b:e:S:T:" \
    "A:V:" \
    "$(_libevm_app_getopts_params_get)" \
    "n:" \
    "$(_wallet_getopts_params_get)" \
    "W:cvh")"
while \
  getopts \
    "${getopts_opts}" \
    arg; do
  _wallet_getopts_case
  _libevm_app_getopts_case
  case \
    "${arg}" in
    i) \
      override_contract_file="${OPTARG}" ;;
    b) \
      override_bytecode_verify="${OPTARG}" ;;
    e) \
      override_evm_version="${OPTARG}" ;;
    S) \
      override_solc_version="${OPTARG}" ;;
    T) \
      override_tnansaction_deployment="${OPTARG}" ;;
    A) \
      override_si_address="${OPTARG}" ;;
    V) \
      override_si_version="${OPTARG}" ;;
    n) \
      override_target_network="${OPTARG}" ;;
    W) \
      override_cache_dir="${OPTARG}" ;;
    c) \
      override_color="y" ;;
    v) \
      override_quiet="n" ;;
    h) \
      _set_overrides && \
      _usage \
        0 ;;
    *) \
      if [[ " ${getopts_opts} " != *"${arg}"* ]]; then
        _msg_error \
          "Invalid argument '${arg}'." \
          0
        _usage \
          1
      fi ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( $# < 1 )); then
  _msg_error \
    "No contract address given." \
    0
  _set_overrides
  _usage \
    1
fi
if (( 0 < $# )); then
  contract_address="${1}"
fi
shift \
  1 || \
  true
command_args+=(
  "$@"
)
_set_overrides
_show_config
app_opts=(
  "${call_auth}"
  "${si_address}"
  "${si_version}"
  "${deployments_dir}"
  "${wallet_name}"
  "${wallet_path}"
  "${wallet_password}"
  "${wallet_seed}"
  "${target_network}"
  "${api_key}"
  "${bytecode_verify}"
  "${cache_dir}"
  "${contract_address}"
  "${target_publisher}"
  "${contract_file}"
  "${transaction_deployment}"
  "${evm_version}"
  "${solc_version}"
)
_evm_contract_source_verify \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
