#!/usr/bin/env bash

# SPDX-License-Identifier: AGPL-3.0

#    ----------------------------------------------------------------------
#    Copyright Â© 2024, 2025  Pellegrino Prevete
#
#    All rights reserved
#    ----------------------------------------------------------------------
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="$( \
  realpath \
    "${_bin}/../lib")"
_crash_bash="${_lib}/libcrash-bash/crash-bash"
_libevm="${_lib}/libevm/libevm"
_sourced \
  "${_crash_bash}" 2>/dev/null || \
  source \
    "${_crash_bash}"
_sourced \
  "${_libevm}"

# Check all required programs
# are available
_requirements() {
  _check_cmd \
    'libevm-requirements' \
    'libevm'
  libevm-requirements
  _check_cmd \
    'evm-contract-call' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-contract-deployment-networks' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-openpgp-key-receive' \
    'evm-openpgp-keyserver'
  _check_cmd \
    'evm-wallet'
  _check_cmd \
    'evmfs'
  # For when spammers of contracts
  # their authors will leave unverified
  # will appear.
  # _check_cmd \
  #   'ur-publishers' \
  #   'ur'
}

# shellcheck disable=SC2034
_global_variables() {
  get_date=""
  call_auth=""
  si_address=""
  si_version=""
  wallet_name=""
  wallet_path=""
  wallet_password=""
  wallet_seed=""
  wallet_address=""
  target_network=""
  api_key=""
  deployments_dir=""
  user_level=""
  source_publisher=""
  contract_network=""
  contract_address=""
  output_dir=""
  output_type=""
  output_file=""
  work_dir=""
  color=""
  quiet=""
}

_contract_call_opts_setup() {
  local \
    _msg=() \
    _evm_contract_call_opts=()
  _evm_contract_call_opts+=(
    -n
      "${_target_network}"
    -k
      "${_api_key_path}"
  )
  _si_call_opts+=(
    "${_evm_contract_call_opts[@]}"
    -A
      "${_si_abi}"
    -B
      "${_si_bytecode}"
    -C
      "${_si_compiler_output}"
    -t
      "static"
  )
}

_recipe_archive_uri_get() {
  local \
    _ur_address="${1}" \
    _publisher="${2}" \
    _pkg="${3}" \
    _revision="${4}" \
    _recipe_archive \
    _price \
    _purchased \
    _msg=() \
    _wallet_address
  _wallet_address="$( \
    evm-wallet \
      get \
        "${_wallet_name}" \
        "address")"
  _purchased="$( \
    evm-contract-call \
      "${_validate_call_opts[@]}" \
      "${_ur_address}" \
      "purchased" \
      "${_pkg}" \
      "${_publisher}" \
      "${_revision}" \
      "${_wallet_address}")"
  if [[ "${_purchased}" == "false" ]]; then
    _msg=(
      "Wallet '${_wallet_name}'"
      "identified by address '${_wallet_address}'"
      "has not purchased revision '${_revision}'"
      "of package '${_pkg}' by publisher '${_publisher}'".
    )
    _msg_error \
      "${_msg[*]}" \
      0
    _msg=(
      "Getting price for revision '${_revision}'"
      "of package '${_pkg}' by publisher"
      "'${_publisher}'."
    )
    _msg_info \
      "${_msg[*]}"
    _price="$( \
      evm-contract-call \
        "${_validate_call_opts[@]}" \
        "${_ur_address}" \
        "price" \
        "${_pkg}" \
        "${_publisher}" \
        "${_revision}")"
    _msg=(
      "Revision '${_revision}' of package"
      "'${_pkg}' by publisher"
      "'${_publisher}' can be purchased for"
      "\$${_price} by running"
      "'ur-purchase ${_pkg}'."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  elif [[ "${_purchased}" == "" ]]; then
    _msg=(
      "Error retrieving the purchasing"
      "status of the package by the user"
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  _msg=(
    "Retrieving recipe URI"
  )
  _msg_info \
    "${_msg[*]}"
  _recipe_archive_uri="$( \
    evm-contract-call \
      "${_retrieve_call_opts[@]}" \
      "${_ur_address}" \
      "readRecipe" \
      "${_pkg}" \
      "${_publisher}" \
      "${_revision}")"
  if [[ "${_recipe_archive_uri}" == "" ]]; then
    _msg=(
      "Target revision '${_revision}' of package"
      "'${_pkg}' by publisher"
      "'${_publisher}' does not exist or there has"
      "been an error retrieving it."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_revision_latest_get() {
  local \
    _ur_address="${1}" \
    _publisher="${2}" \
    _pkg="${3}" \
    _msg=() \
    _revno
  _msg=(
    "Getting latest revision for"
    "package '${_pkg}' and publisher"
    "'${_publisher}'."
  )
  _msg_info \
    "${_msg[*]}"
  _revno="$( \
    evm-contract-call \
      "${_validate_call_opts[@]}" \
      "${_ur_address}" \
      "revNo" \
      "${_pkg}" \
      "${_publisher}")"
  if [[ "${_revno}" == "0" ]]; then
    _msg=(
      "Publisher '${_publisher}'"
      "has published no '${_pkg}'"
      "package."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  elif (( 0 < "${_revno}" )); then
    _revision_latest="$(( \
      _revno - 1))"
    _msg=(
      "Latest revision for '${_pkg}'"
      "is '${_revision_latest}'."
    )
    _msg_info \
      "${_msg[*]}"
  else
    _msg=(
      "Error while retrieving"
      "revision for package '${_pkg}'"
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_recipe_archive_get() {
  local \
    _uri="${1}" \
    _dest="${2}" \
    _evmfs_opts=() \
    _msg=()
  _msg=(
    "Saving recipe in '${_dest}'."
  )
  _msg_info \
    "${_msg[*]}"
  if [[ "${quiet}" == "n" ]]; then
    _evmfs_opts+=(
      -v
    )
  fi
  _evmfs_opts+=(
    -o
      "${_dest}"
  )
  evmfs \
    "${_evmfs_opts[@]}" \
    get \
      "${_uri}" || \
    true
  if [[ ! -e "${_dest}" ]]; then
    _msg=(
      "Error saving the build"
      "recipe in '${_dest}'."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  elif [[ -e "${_dest}" ]]; then
    _msg=(
      "Recipe archive correctly saved onto"
      "'${_dest}'."
    )
    _msg_info \
      "${_msg[*]}"
  fi
}

_signature_keyring_verify() {
  local \
    _gpg_out="${1}" \
    _nopubkey_string \
    _goodsig_string \
    _fingerprint_string \
    _errsig_string \
    _fingerprint
   _nopubkey_string="$( \
    echo \
      "${_gpg_out}" | \
      grep \
        "^\[GNUPG:\] NO_PUBKEY " || \
      true)"
  _goodsig_string="$( \
    echo \
      "${_gpg_out}" | \
      grep \
        "^\[GNUPG:\] GOODSIG " || \
      true)"
  if [[ "${_nopubkey_string}" == "" ]] && \
     [[ "${_goodsig_string}" != "" ]]; then
    _fingerprint_string="$( \
      echo \
        "${_gpg_out}" | \
        grep \
          "^\[GNUPG:\] KEY_CONSIDERED " || \
        true)"
    _fingerprint="$( \
      echo \
        "${_fingerprint_string}" | \
        awk \
          '{print $3}')"
    _msg=(
      "The key used to sign the archive"
      "is correct and has fingerprint"
      "'${_fingerprint}'."
    )
  elif [[ "${_nopubkey_string}" != "" ]] && \
       [[ "${_goodsig_string}" == "" ]]; then
    _errsig_string="$( \
      echo \
        "${_gpg_out}" | \
        grep \
          "^\[GNUPG:\] ERRSIG " || \
        true)"
    _fingerprint="$( \
      echo \
        "${_errsig_string}" | \
        awk \
          '{print $9}')"
    _msg=(
      "Archive signed with unknown"
      "fingerprint '${_fingerprint}'."
      "If you are sure the fingerprint"
      "is indeed correct run"
      "'ur-publishers update'"
      "to update the Ur publishers"
      "signatures' database."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_newkey_author_extract(){
  local \
    _gpg_out="${1}" \
    _pattern
  _pattern="^\[GNUPG:\] NEWSIG "
  _author_string="$( \
    echo \
      "${_gpg_out}" | \
      grep \
        "${_pattern}" || \
      true)"
  _author="$( \
    echo \
      "${_author_string}" | \
      awk \
        '{print $3}')"
}

_validkey_author_extract(){
  local \
    _gpg_out="${1}" \
    _pattern \
    _fingerprint \
    _gpg_opts=() \
    _gpg_key_info_opts=()
  _gpg_opts+=(
    --homedir
      "${_gnupg_home}"
    --export
    --armor
  )
  _gpg_key_info_opts+=(
    -o
      "email"
  )
  _pattern="^\[GNUPG:\] VALIDSIG "
  _author_string="$( \
    echo \
      "${_gpg_out}" | \
      grep \
        "${_pattern}" || \
      true)"
  _fingerprint="$( \
    echo \
      "${_author_string}" | \
      awk \
        '{print $3}')"
  gpg \
    "${_gpg_opts[@]}" \
    "${_fingerprint}" > \
    "${_pkg_dir}/${_fingerprint}.asc"
  _author="$( \
    gpg-key-info \
      "${_gpg_key_info_opts[@]}" \
      "${_pkg_dir}/${_fingerprint}.asc")"
  rm \
    -rf \
    "${_pkg_dir}/${_fingerprint}.asc"
}

_signature_author_verify() {
  local \
    _publisher="${1}" \
    _gpg_out="${2}" \
    _author_string \
    _author \
    _msg=() \
    _unsigned \
    _patterns=() \
    _pattern
  _publisher="$( \
    _lower \
      "${_publisher}")"
  _newkey_author_extract \
    "${_gpg_out}"
  if [[ "${_author}" == "" ]]; then
    _validkey_author_extract \
      "${_gpg_out}"
  fi
  _author="$( \
    _lower \
      "${_author}")"
  if [[ "${_author_string}" == "" ]]; then
    _unsigned="$( \
      echo \
        "${_gpg_out}" | \
        grep \
          "^\[GNUPG:\] NODATA 3" || \
        true)"
    if [[ "${_unsigned}" != "" ]]; then
      _msg=(
        "The archive is not signed."
      )
    else
      _msg=(
        "Unknown GNUPG error."
        "GNUPG output:"
      )
    fi
    _msg_error \
      "${_msg[*]}" \
      0
    echo \
      "${_gpg_out}"
  fi
  if [[ "${_author}" == "" ]]; then
    _msg=(
      "Archive '${_archive}' is"
      "missing an author."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  if [[ "${_author}" != *"@${_publisher}" ]]; then
    _msg=(
      "Archive '${_archive}' is signed"
      "by '${_author#*@}' while it should"
      "be signed by '${_publisher}'."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_recipe_archive_validate() {
  local \
    _archive="${1}" \
    _publisher="${2}" \
    _gpg_out \
    _gpg_opts=() \
    _author \
    _msg=()
  _msg=(
    "Validating archive"
    "'${_archive}' has been properly"
    "signed by '${_publisher}'."
  )
  _msg_info \
    "${_msg[*]}"
  _gpg_opts+=(
    --homedir
      "${_gnupg_home}"
    --with-colons
    --status-fd
      1
    --verify
  )
  if [[ ! -e "${_archive}" ]]; then
    _msg=(
      "Somehow the archive '${_archive}'"
      "does not exist."
    )
    _msg_info \
      "${_msg[*]}"
  elif [[ -e "${_archive}" ]]; then
    _msg=(
      "Found archive at location"
      "'${_archive}.'"
    )
  fi
  if [[ "${quiet}" == "y" ]]; then
    _gpg_out="$( \
      gpg \
        "${_gpg_opts[@]}" \
        "${_archive}" 2>/dev/null || \
      true)"
  elif [[ "${quiet}" == "n" ]]; then
    _gpg_out="$( \
      gpg \
        "${_gpg_opts[@]}" \
        "${_archive}" || \
      true)"
  fi
  if [[ "${_gpg_out}" == "" ]]; then
    _msg=(
      "Error verifying archive signature."
      "Try running 'ur-publishers update'."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  _signature_author_verify \
    "${_publisher}" \
    "${_gpg_out}"
  _signature_keyring_verify \
    "${_gpg_out}"
}

_archive_contents_read() {
  local \
    _archive="${1}" \
    _tar_opts=() \
    _content \
    _contents=() \
    _msg=()
  _tar_opts+=(
    -t
    -f
  )
  mapfile \
    -d \
    $'\n' \
    _contents < \
    <(tar \
        "${_tar_opts[@]}" \
        "${_archive}" || \
      true)
  for _content in "${_contents[@]}"; do
    _archive_contents+=(
      "${_content%$'\n'}"
    )
  done
  if [[ "${_archive_contents[*]}" == "" ]]; then
    _msg=(
      "Corrupted or empty archive '${_archive}'."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_archive_contents_check() {
  local \
    _pkg="${1}" \
    _archive="${2}" \
    _archive_contents=() \
    _file \
    _msg=()
  _msg=(
    "Verifying '${_archive}'"
    "integrity for package '${_pkg}'."
  )
  _msg_info \
    "${_msg[*]}"
  _archive_contents_read \
    "${_archive}"
  for _file in "${_archive_contents[@]}"; do
    if [[ "${_file}" != "${_pkg}/"* && \
          "${_file}" != *"/" ]]; then
      _msg=(
        "Found '${_file}' in archive '${_archive}',"
        "but all files must reside in the '${_pkg}/'"
        "directory."
      )
      _msg_error \
        "${_msg[*]}" \
        1
    fi
  done
}

_recipe_archive_extract() {
  local \
    _pkg="${1}" \
    _recipe_archive="${2}" \
    _pkg_dir="${3}" \
    _verify_skip="${4}" \
    _msg=() \
    _tar_archive \
    _integrity_error \
    _tar_opts=() \
    _gpg_opts=() \
    _archive_contents=() \
    _file
  _tar_archive="${_recipe_archive%.gpg}"
  if [[ "${_verify_skip}" == "n" ]]; then
    _gpg_opts+=(
      --homedir
        "${_gnupg_home}"
      --output
        "${_tar_archive}"
      --decrypt
    )
    gpg \
      "${_gpg_opts[@]}" \
      "${_recipe_archive}"
  fi
  _archive_contents_check \
    "${_pkg}" \
    "${_tar_archive}"
  if [[ "${quiet}" == "n" ]]; then
    _tar_opts+=(
      -v
    )
  fi
  _tar_opts+=(
    --directory
      "${_pkg_dir}"
    -x
    -f
  )
  tar \
    "${_tar_opts[@]}" \
    "${_tar_archive}"
}

_revision_validate() {
  local \
    _revision="${1}" \
    _revision_latest="${2}" \
    _msg=()
  if (( "${_revision}" < "${_revision_latest}" )); then
    _msg=(
      "Getting revision '${_revision}',"
      "while latest is '${_revision_latest}'."
    )
    _msg_warning \
      "${_msg[*]}"
  elif (( "${_revision}" > "${_revision_latest}" )); then
    _msg=(
      "Trying to get revision '${_revision}',"
      "while latest is '${_revision_latest}'."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_tx_deployment_get() {
  local \
    _publisher="${1}"
  evm-contract-call \
    "${_si_call_opts[@]}" \
    "${_si_address}" \
    "deploymentTransaction" \
    "${_publisher}" \
    "${_contract_network}" \
    "${_contract_address}"
}

_deployer_get() {
  local \
    _publisher="${1}" \
    _evm_contract_deployer_get_opts=() \
    _tx_deployment \
    _tx_null \
    _msg=()
  _tx_null="0x0000000000000000000000000000000000000000000000000000000000000000"
  _msg=(
    "Getting deployer address"
    "reported by publisher '${_publisher}'."
  )
  _tx_deployment="$( \
    _tx_deployment_get \
      "${_publisher}")"
  _evm_contract_deployer_get_opts+=(
    -n
      "${_contract_network}"
  )
  if [[ "${_tx_deployment}" == "${_tx_null}" ]]; then
    _msg=(
      "No deployment transaction attached to"
      "publisher '${_pubisher}' reported"
      "contracts' sources."
    )
    _msg_info \
      "${_msg[*]}"
  elif [[ "${_tx_deployment}" != "${_tx_null}" ]]; then
    _msg=(
      "Retrieving the deployer from the"
      "reported deployment transaction."
    )
    _msg_info \
      "${_msg[*]}"
    _deployer="$( \
      evm-contract-deployer-get \
        "${_evm_contract_deployer_get_opts[@]}" \
        "${_contract_address}" \
        "${_tx_deployment}" \
        2>/dev/null)"
  fi
  if [[ "${_deployer}" == "" ]]; then
    _msg=(
      "Invalid deployment transaction"
      "reported by publisher '${_publisher}'."
    )
    _msg_info \
      "${_msg[*]}"
  elif [[ "${_deployer}" != "" ]]; then
    _msg=(
      "Found deployer '${_deployer}'."
    )
    _msg_info \
      "${_msg[*]}"
  fi
}

_publisher_get() {
  local \
    _publisher_no="${1}" \
    _msg=()
  _msg=(
    "Retrieving '${_publisher_no}'th"
    "source publisher address."
  )
  _msg_info \
    "${_msg[*]}"
  _publisher="$( \
    evm-contract-call \
      "${_si_call_opts[@]}" \
      "${_si_address}" \
      "sourcePublisher" \
      "${_contract_network}" \
      "${_contract_address}" \
      "${_publisher_no}")"
}

_publisher_auto_detect() {
  local \
    _publishers_amount \
    _locked \
    _tx_deployment \
    _publisher \
    _cursor \
    _publisher_no \
    _address_null \
    _deployer \
    _msg=()
  _deployer=""
  _publisher_no="0"
  _msg=(
    "Automatically detecting"
    "target publisher for the"
    "contract source."
  )
  _msg_info \
    "${_msg[*]}"
  _publisher_get \
    "${_publisher_no}"
  _address_null="0x0000000000000000000000000000000000000000"
  if [[ "${_publisher}" == "${_address_null}" ]]; then
    _msg=(
      "Nobody has published the source"
      "for this contract. Please consider"
      "doing it yourself."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  _deployer_get \
    "${_publisher}"
  if [[ "${_deployer}" != "" ]]; then
    _msg=(
      "Selecting deployer '${_deployer}' reported by"
      "publisher '${_publisher}' as target"
      "contract source publisher."
    )
    _msg_info \
      "${_msg[*]}"
    _target_publishers+=(
      "${_deployer}"
      # TODO: Enable getting the source from
      # whomever has published the
      # contract kirsh when the
      # bytecode verification tool
      # is ready.
      # "${_publisher}"
    )
    return
  elif [[ "${_deployer}" == "" ]]; then
    _msg=(
      "Kirsh publisher for this contract's"
      "source code hasn't correctly reported the"
      "contract deployer, getting full"
      "list of source publishers."
    )
    _msg_info \
      "${_msg[*]}"
  fi
  if [[ "${wallet_address}" != "" ]]; then
    _msg=(
      "Trying recovering deployer from"
      "own namespace before attempting"
      "with more the public list."
    )
    _deployer_get \
      "${wallet_address}"
    if [[ "${_deployer}" != "" ]]; then
      _msg=(
        "Selecting self-reported deployer '${_deployer}'"
        "as target contract source publisher."
      )
      _msg_info \
        "${_msg[*]}"
      _target_publishers+=(
        "${_deployer}"
        # Since user has published the deployer
        # he could also have published the
        # code so it's worth checking
        # if deployer has not.
        "${wallet_address}"	
      )
      return
    elif [[ "${_deployer}" == "" ]]; then
      _msg=(
        "No self-reported deployer address."
        "Consider doing it if the correct one"
        "is quite down the list and signing up as"
        "an Ur publisher to speed up the look-up"
        "for others as well."
      )
    fi
  fi
  _publisher_no="$( \
    evm-contract-call \
      "${_si_call_opts[@]}" \
      "${_si_address}" \
      "publisherNo" \
      "${_contract_network}" \
      "${_contract_address}")"
  _msg=(
    "Found '$(("${_publisher_no}" + 1))'"
    "publishers."
  )
  _msg_info \
    "${_msg[*]}"
  for _cursor \
    in $(seq 1 \
             "${_publisher_no}"); do
    _publisher="$( \
      _publisher_get \
        "${_cursor}")"
    _deployer_get \
      "${_publisher}"
    if [[ "${_deployer}" != "" ]]; then
      _msg=(
        "Selecting deployer '${_deployer}' reported by"
        "publisher '${_publisher}' as target"
        "contract source publisher."
      )
      _msg_info \
        "${_msg[*]}"
      _target_publisher="${_deployer}"
      break
    fi
  done
  if [[ "${_deployer}" == "" ]]; then
    _msg=(
      "Deployer not found in"
      "any of the source code"
      "listings, consider posting it"
      "yourself."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_publisher_keys_find() {
  local \
    _dir="${1}" \
    _publisher="${2}" \
    _find_opts=()
  _msg=(
    "Looking for keys by publisher '${_publisher}'"
    "in local EVM OpenPGP Key Server database"
    "'${_dir}'."
  )
  _msg_info \
    "${_msg[*]}"
  _publisher_keys=()
  _find_opts+=(
    -type
      "f"
    -name
      "${_publisher}.*.asc"
    -print0
  )
  _msg=(
    "Running find with options"
    "'${_find_opts[@]}'."
  )
  _msg_info \
    "${_msg[*]}"
  mapfile \
    -d \
    $'\0' \
    _publisher_keys < \
    <(find \
        "${_dir}" \
        "${_find_opts[@]}" 2>/dev/null || \
      true)
}

_evm_contract_source_get() {
  local \
    _si_address="${1}" \
    _si_version="${2}" \
    _deployments_dir="${3}" \
    _wallet_name="${4}" \
    _wallet_path="${5}" \
    _wallet_password="${6}" \
    _wallet_seed="${7}" \
    _target_network="${8}" \
    _api_key_path="${9}" \
    _target_publisher="${10}" \
    _contract_network="${11}" \
    _contract_address="${12}" \
    _work_dir="${13}" \
    _output_type="${14}" \
    _output_dir="${15}" \
    _output_file="${16}" \
    _publisher \
    _publisher_keys=() \
    _target_publishers=() \
    _si_call_opts=() \
    _cache_dir \
    _si_abi \
    _si_bytecode \
    _si_compiler_output \
    _source_archive_uri \
    _source_archive \
    _publisher_latest \
    _gnupg_home \
    _evm_openpgp_keyserver_db_dir \
    _msg=()
  _evm_openpgp_keyserver_db_dir="${HOME}/.cache/evm-openpgp-keyserver/receive"
  _cache_dir="$( \
    _cache_dir_get)"
  _contract_artifacts_auto_detect \
    "${_deployments_dir}" \
    "${_target_network}" \
    "SourceIndex" \
    "_si" \
    "${_si_version}"
  _contract_call_opts_setup 
  if [[ "${_target_publisher}" == "" ]]; then
    _publisher_auto_detect
  elif [[ "${_target_publisher}" != "" ]]; then
    _target_publishers+=(
      "${_target_publisher}"
    )
  fi
  for _publisher in "${_target_publishers[@]}"; do
    _publisher_dir="${_work_dir}/${_publisher}"
    _publisher_dir_setup \
       "${_publisher_dir}"
    _source_archive="${_publisher_dir}/${_contract_address}.tar.xz.gpg"
    _publisher_keys_find \
      "${_evm_openpgp_keyserver_db_dir}" \
      "${_publisher}"
    if [[ "${_publisher_keys[*]}" == "" ]]; then
      _msg=(
        "No OpenPGP public keys found for"
	"publisher '${_publisher}', downloading."
      )
      _msg_info \
        "${_msg[*]}"
      evm-openpgp-key-receive \
        ""
    fi
  _gnupg_home="${_cache_dir}/gnupg"
  if [[ ! -e "${_gnupg_home}" ]]; then
    _msg=(
      "Source Index publishers keyring does not exist."
    )
    _msg_info \
      "${_msg[*]}"
  fi
  _revision_latest_get \
    "${_ur_address}" \
    "${_publisher}" \
    "${_pkg}"
  if [[ "${_revision}" == "latest" || \
        "${_revision}" == "" ]]; then
    _revision="${_revision_latest}"
  fi
  _revision_validate \
    "${_revision}" \
    "${_revision_latest}"
  _recipe_archive_uri_get \
    "${_ur_address}" \
    "${_publisher}" \
    "${_pkg}" \
    "${_revision}"
  _recipe_archive_get \
    "${_recipe_archive_uri}" \
    "${_recipe_archive}"
  if [[ "${_verify_skip}" == "n" ]]; then
    _recipe_archive_validate \
      "${_recipe_archive}" \
      "${_publisher}"
  elif [[ "${_verify_skip}" == "y" ]]; then
    _msg=(
      "Skipping signature verification."
    )
    _msg_info \
      "${_msg[*]}"
  fi
  _recipe_archive_extract \
    "${_pkg}" \
    "${_recipe_archive}" \
    "${_pkg_dir}" \
    "${_verify_skip}"
  _retrieved="true"
}

_publisher_dir_setup() {
  local \
    _dir="${1}"
  mkdir \
    -p \
    "${_dir}"
  chmod \
    700 \
    "${_dir}"
}

_work_dir_check() {
  local \
    _msg=()
  if [[ ! -d "${_work_dir}" ]]; then
    _msg=(
      "Work directory '${_work_dir}'"
      "does not exist."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_contract_deployer_auto_detect() {
  local \
    _msg=()
  _msg=(
    "Source publisher not specified,"
    "attempting to retrieve the source"
    "published from the contract deployer."
  )
  _msg_warning \
    "${_msg[*]}"
  # TODO: write it.
}

_work_dir_auto_detect() {
  local \
    _cache_dir \
    _dir \
    _contract_dir
  _cache_dir="$( \
    _cache_dir_get)"
  _contract_dir="${_cache_dir}/${contract_network}/${contract_address}"
  _dir="${_contract_dir}/work"
  mkdir \
    -p \
    "${_dir}"
  chmod \
    700 \
    "${_dir}"
  _set_override \
    "work" \
    "dir" \
    "${_dir}"
}

_cache_dir_get() {
  local \
    _dir
  _dir="${HOME}/.cache/${app_name}"
  mkdir \
    -p \
    "${_dir}"
  chmod \
    700 \
    "${_dir}"
  echo \
    "${_dir}"
}

_output_dir_auto_detect() {
  local \
    _cache_dir \
    _output_dir
  if [[ "${output_type}" == "all" ]]; then
    _cache_dir="$( \
      _cache_dir_get)"
    _output_dir="${_cache_dir}/${contract_network}/${contract_address}"
  elif [[ "${output_type}" != "all" ]]; then
    _output_dir="$( \
      pwd)"
  fi
  _set_override \
    "output" \
    "dir" \
    "${_output_dir}"
}

# Set defaults and, if present, overrides
# command line option parameters
_set_overrides() {
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  _set_override \
    "get" \
    "date" \
    "$(_get_date_human)"
  _work_dir_auto_detect
  _set_override \
    "output" \
    "type" \
    "all"
  _output_dir_auto_detect
  _set_override \
    "user" \
    "level" \
    "n"
  _deployments_dir_auto_detect \
    "evm-contracts-source-index" \
    "${user_level}"
  _network_auto_detect \
    "SourceIndex" \
    "${deployments_dir}" \
    "${user_level}"
  _api_key_auto_detect \
    "${target_network}"
  if [[ "${call_auth}" == "y" ]]; then
    _set_override \
      "wallet" \
      "name" \
      "default"
    _set_override \
      "wallet" \
      "path" \
      "$(_wallet_path_get \
           "evm-wallet" \
           "${wallet_name}")"
    _secret_auto_detect \
      "seed" \
      "seed" \
      "evm-wallet" \
      "${wallet_name}"
    _secret_auto_detect \
      "password" \
      "plain" \
      "evm-wallet" \
      "${wallet_name}"
    _set_override \
      "wallet" \
      "address" \
      "$(evm-wallet \
           get \
             "${wallet_name}" \
             "address")"
  elif [[ "${call_auth}" == "n" ]]; then
    _set_override \
      "wallet" \
      "name" \
      ""
    _set_override \
      "wallet" \
      "path" \
      ""
    _set_override \
      "wallet" \
      "seed" \
      ""
    _set_override \
      "wallet" \
      "password" \
      ""
    _set_override \
      "wallet" \
      "address" \
      ""
  fi
  _contract_version_auto_detect \
    "${deployments_dir}" \
    "SourceIndex" \
    "si" \
    "${target_network}"
  _contract_address_auto_detect \
    "evm-contracts-source-index" \
    "SourceIndex" \
    "si" \
    "${target_network}" \
    "${si_version}" \
    "${user_level}" \
    "${deployments_dir}"
  _set_override \
    "source" \
    "publisher" \
    ""
}


# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _exit="${1}" \
    _deployment \
    _networks=() \
    _usage_text
  _deployment="${deployments_dir}/SourceIndex"
  _networks=( $( \
    evm-contract-deployment-networks \
      -A \
      "${_deployment}")
  )
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Build recipes retrieval tool.

Usage:
  ${app_name}
    [options]
    (<contract_network>)
    <contract_address>

networks:
$(_display_networks \
     "${_networks[@]}")

  options:
     -P <publisher>         Contract source publisher. 
                            If not specified the program will
                            look through the source publishers list,
                            look for the deployer and attempt to retrieve
                            its sources.
                            If the deployer is not found after a certain
                            number of attempts and the 'authenticated call'
                            '-a' option is enabled, the program will
                            check if the source has been published on the
                            user's own namespace.
                            If not, the program will resume looking through
                            the publishers' list and if the deployer won't
                            be found the program will return an error.
                            Default: ${source_publisher}
     -W <work_dir>          Work directory.
                            Default: ${output_dir}
     -o <output_dir>        It can be 'source', 'evm_version', 'compiler',
                            'compiler_version', 'tx_deployment' or 'all'.
                            Default: ${output_dir}
     -o <output_dir>        Output directory.
                            Default: ${output_dir}
     -A <si_address>        Address of the SourceIndex
                            contract on the network.
                            Default: ${si_address}
     -V <si_version>        Version of the target SourceIndex
                            contract.
                            Default: ${si_version}
     -u                     Whether to retrieve user repository
                            address from user directory or custom
                            deployment.
                            Default: ${user_level}
     -d <deployments_dir>   Contracts deployments directory.
                            Default: ${deployments_dir}
     -a                     Whether to perform an authenticated
                            call.
                            Default: ${call_auth}
     -N <wallet_name>       Wallet name.
                            Default: ${wallet_name}
     -w <wallet_path>       Wallet path.
                            Default: ${wallet_path}
     -p <wallet_password>   Wallet password.
                            Default: ${wallet_password}
     -s <wallet_seed>       Wallet seed path.
                            Default: ${wallet_seed}
     -n <network>           EVM network name for the SourceIndex
                            contract (${_networks[*]}).
                            Default: ${target_network}
     -k <api_key>           Etherscan-like service key.
                            Default: ${api_key}

     -c                     Colors.
     -h                     This message.
     -v                     Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${_exit}"
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "                       Get date:   ${get_date}"
  _msg_info "               Source publisher:   ${source_publisher}"
  _msg_info "                 Work directory:   ${work_dir}"
  _msg_info "               Output directory:   ${output_dir}"
  _msg_info "           Source Index address:   ${ur_address}"
  _msg_info "           Source Index version:   ${ur_version}"
  _msg_info "                     User level:   ${user_level}"
  _msg_info "          Deployments directory:   ${deployments_dir}"
  _msg_info "             Authenticated call:   ${call_auth}"
  _msg_info "                    Wallet name:   ${wallet_name}"
  _msg_info "                    Wallet path:   ${wallet_path}"
  _msg_info "                Wallet password:   ${wallet_password}"
  _msg_info "                    Wallet seed:   ${wallet_seed}"
  _msg_info "                 Target network:   ${target_network}"
  _msg_info "                        API key:   ${api_key}"
  _msg_info "               Contract network:   ${contract_network}"
  _msg_info "               Contract address:   ${contract_address}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'P:W:t:o:A:V:ud:N:w:p:s:n:k:cvh?' \
    arg; do
  case \
    "${arg}" in
    P) override_source_publisher="${OPTARG}" ;;
    W) override_work_dir="${OPTARG}" ;;
    t) override_output_type="${OPTARG}" ;;
    o) override_output_dir="${OPTARG}" ;;
    A) override_si_address="${OPTARG}" ;;
    V) override_si_version="${OPTARG}" ;;
    u) override_user_level="y" ;;
    d) override_deployments_dir="${OPTARG}" ;;
    a) override_call_auth="${OPTARG}" ;;
    N) override_wallet_name="${OPTARG}" ;;
    w) override_wallet_path="${OPTARG}" ;;
    p) override_wallet_password="${OPTARG}" ;;
    s) override_wallet_seed="${OPTARG}" ;;
    n) override_target_network="${OPTARG}" ;;
    k) override_api_key="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'." \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( $# < 1 )); then
  _msg_error \
    "No contract address or network specified." \
    0
  _usage \
    1
fi
if (( $# < 2 )); then
  if [[ "${1}" == "0x"* ]]; then
    _msg=(
      "No contract network specified,"
      "assuming the target network is"
      "the same of the target Source"
      "Index."
    )
    _msg_info \
      "${_msg[*]}"
    contract_address="${1}"
  else
    _msg_error \
      "No contract address specified." \
      0
    _usage \
      1
  fi
else
  contract_network="${1}"
  contract_address="${2}"
fi
_set_overrides
app_opts+=(
  "${si_address}"
  "${si_version}"
  "${deployments_dir}"
  "${wallet_name}"
  "${wallet_path}"
  "${wallet_password}"
  "${wallet_seed}"
  "${target_network}"
  "${api_key}"
  "${source_publisher}"
  "${contract_network}"
  "${contract_address}"
  "${work_dir}"
  "${output_type}"
  "${output_dir}"
  "${output_file}"
)
_show_config
_evm_contract_source_get \
  "${app_opts[@]}"
